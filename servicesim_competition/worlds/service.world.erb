<%
  # ServiceSim world generator
  #
  # Command line options:
  # -s seed for random

  ###############################################
  #                                             #
  #           COMMAND LINE ARGUMENTS            #
  #                                             #
  ###############################################

  # Read task number from command line
  vars = ARGV.take_while {|arg| arg[/^\w+=/]}
  ARGV.slice!(0, vars.size)
  vars.each do |var|
    k, v = var.split('=', 2)
    TOPLEVEL_BINDING.eval %Q(#{k} = "#{v}")
  end

  seed = rand(0..10000000)
  if (defined? s)
    seed = s.to_i
  end
  srand(seed)

  ###############################################
  #                                             #
  #           IMPORT OTHER ERB FILES            #
  #                                             #
  ###############################################

  # Helper function to import another erb file
  def fromFile filename
    return ERB.new(File.read(filename), nil, nil, '_sub01').result(binding)
  end

  ###############################################
  #                                             #
  #                NON-GUEST HUMANS             #
  #                                             #
  ###############################################

  # Skin files under model://actor/meshes
  skins =
  [
    "SKIN_man_blue_shirt.dae",
    "SKIN_man_green_shirt.dae",
    "SKIN_man_red_shirt.dae"
  ]

  # Idling animation files under model://actor/meshes
  animations_idle =
  [
    "ANIMATION_talking_a.dae",
    "ANIMATION_talking_b.dae"
  ]

  # Trajectory animation files under model://actor/meshes
  animations_trajectory =
  [
    "ANIMATION_walking.dae",
    "ANIMATION_running.dae"
  ]

  # List of idle actors to be inserted
  actors_idle =
  [
    # Example randomizing skin and animation
    {:skin => skins.sample, :anim => animations_idle.sample, :config_file => 'idle_near_entrance.erb'},
    # Example using skin and animation from config
    {:config_file => 'idle_near_fridge.erb'}
  ]

  # List of trajectory actors to be inserted
  actors_trajectory =
  [
    # Example randomizing skin
    {:skin => skins.sample, :config_file => 'trajectory_front.erb'},
    # Example setting velocity
    {:velocity => rand(0.9..1.2), :config_file => 'trajectory_back.erb'},
  ]

  ###############################################
  #                                             #
  #                   GUEST                     #
  #                                             #
  ###############################################

  guest_name = 'guest'
  guest_pose = [-12.7, -18.78, 1.19, 1.54, 0, 1.9]
  guest_skin = skins.sample
  guest_anim = animations_trajectory[0]
  drift_times = []

  # Generate random drift times
  minInterval = 5
  maxInterval = 300
  time = 0
  (1..30).each do
    time += rand(minInterval..maxInterval)
    drift_times.push(time)
  end

  ###############################################
  #                                             #
  #                   ROBOT                     #
  #                                             #
  ###############################################

  robot_name = 'servicebot'

  ###############################################
  #                                             #
  #               CHECKPOINTS                   #
  #                                             #
  ###############################################

  # Pickup location
  pick_up_location =
  {
    :name => 'reception',
    :pose => guest_pose,
    :size => [4, 4, 10]
  }

  drop_off_location =
  {
    :name => 'office_1',
    :pose => [-12.4, -13.5, 0, 0, 0, 0],
    :size => [4, 4, 10]
  }

  ###############################################
  #                                             #
  #               INITIALIZATION                #
  #                                             #
  ###############################################

  # Relative path from where the script is being run to the script's directory
  DIR = File.dirname(__FILE__)

  # Actor's Z position
  actor_pos_z = 1.25
%>
<!--
  Generated from service.world.erb
  Seed: <%= seed %>
-->
<?xml version="1.0" ?>
<sdf version="1.6">
  <world name="ServiceSim">

    <!-- Competition plugin -->
    <plugin name="competition" filename="libCompetitionPlugin.so">

      <pick_up_location>
        <%= pick_up_location[:name] %>
      </pick_up_location>

      <drop_off_location>
        <%= drop_off_location[:name] %>
      </drop_off_location>

      <guest_name><%= guest_name %></guest_name>

      <go_to_pick_up>
        <name>Go to pick-up location</name>
        <weight>1.0</weight>
        <!-- for contain plugin -->
        <namespace>/servicesim/go_to_pick_up</namespace>
      </go_to_pick_up>

      <pick_up>
        <name>Pick-up guest</name>
        <weight>1.0</weight>
      </pick_up>

      <drop_off>
        <name>Drop-off guest</name>
        <weight>1.0</weight>
        <!-- for contain plugin -->
        <namespace>/servicesim/drop_off</namespace>
      </drop_off>

      <return_to_start>
        <name>Return to start</name>
        <weight>1.0</weight>
      </return_to_start>

    </plugin>

    <!-- Pick-up area contain plugin -->
    <plugin name="pick_up" filename="libContainPlugin.so">
      <entity><%= robot_name %></entity>
      <namespace>servicesim/go_to_pick_up</namespace>
      <enabled>false</enabled>
      <pose>
        <%= pick_up_location[:pose][0] %>
        <%= pick_up_location[:pose][1] %>
        <%= pick_up_location[:pose][2] %>
        <%= pick_up_location[:pose][3] %>
        <%= pick_up_location[:pose][4] %>
        <%= pick_up_location[:pose][5] %>
      </pose>
      <geometry>
        <box>
          <size>
            <%= pick_up_location[:size][0] %>
            <%= pick_up_location[:size][1] %>
            <%= pick_up_location[:size][2] %>
          </size>
        </box>
      </geometry>
    </plugin>

    <!-- Drop-off area contain plugin -->
    <plugin name="drop_off" filename="libContainPlugin.so">
      <entity><%= guest_name %></entity>
      <namespace>servicesim/drop_off</namespace>
      <enabled>false</enabled>
      <pose>
        <%= drop_off_location[:pose][0] %>
        <%= drop_off_location[:pose][1] %>
        <%= drop_off_location[:pose][2] %>
        <%= drop_off_location[:pose][3] %>
        <%= drop_off_location[:pose][4] %>
        <%= drop_off_location[:pose][5] %>
      </pose>
      <geometry>
        <box>
          <size>
            <%= drop_off_location[:size][0] %>
            <%= drop_off_location[:size][1] %>
            <%= drop_off_location[:size][2] %>
          </size>
        </box>
      </geometry>
    </plugin>

    <!-- GUI -->
    <gui fullscreen='0'>
      <camera name='user_camera'>
        <pose>-14.41 -19.9 4.14 0 0.5 0.76</pose>
      </camera>
    </gui>

    <!-- Scene -->
    <scene>
      <background>0.66 0.77 0.84 1.0</background>
      <grid>0</grid>
      <origin_visual>0</origin_visual>
    </scene>

    <!-- A global light source -->
    <light type="directional" name="sun">
      <cast_shadows>true</cast_shadows>
      <pose>0 0 1000 0 0 0</pose>
      <diffuse>0.8 0.8 0.8 1</diffuse>
      <specular>0.2 0.2 0.2 1</specular>
      <attenuation>
        <range>1000</range>
        <constant>0.9</constant>
        <linear>0.01</linear>
        <quadratic>0.001</quadratic>
      </attenuation>
      <direction>-0.5 0.1 -0.9</direction>
    </light>

    <!-- Ground collision -->
    <model name="ground_collision">
      <static>true</static>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>80 80</size>
            </plane>
          </geometry>
        </collision>
      </link>
    </model>

    <!-- Office -->
    <include>
      <uri>model://willowgarage</uri>
    </include>

    <!-- Guest -->
    <actor name="<%= guest_name %>">

      <!-- Starting pose, nice for when the world is reset -->
      <pose>
        <%= guest_pose[0] %>
        <%= guest_pose[1] %>
        <%= guest_pose[2] %>
        <%= guest_pose[3] %>
        <%= guest_pose[4] %>
        <%= guest_pose[5] %>
      </pose>

      <skin>
        <filename>model://actor/meshes/<%= guest_skin %></filename>
      </skin>

      <animation name="animation">
        <filename>model://actor/meshes/<%= guest_anim %></filename>
      </animation>

      <!-- Need one waypoint to idle at -->
      <script>
        <trajectory id='0' type='animation'>
          <waypoint>
            <time>100</time>
              <pose>
                <%= guest_pose[0] %>
                <%= guest_pose[1] %>
                <%= guest_pose[2] %>
                <%= guest_pose[3] %>
                <%= guest_pose[4] %>
                <%= guest_pose[5] %>
              </pose>
          </waypoint>
        </trajectory>
      </script>

      <plugin name="trajectory" filename="libFollowActorPlugin.so">

        <namespace>servicesim</namespace>

        <ignore_obstacle>willowgarage</ignore_obstacle>
        <ignore_obstacle>ground_collision</ignore_obstacle>

        <!-- FIXME: servicebot's bounding box is huge and always colliding -->
        <ignore_obstacle>servicebot</ignore_obstacle>

        <% for time in drift_times %>
          <drift_time><%= time.to_s %></drift_time>
        <% end %>

      </plugin>

    </actor>

    <!-- Trajectory actors -->
    <%
      count = 0
      for actor in actors_trajectory

        # unique name
        count = count + 1
        $actor_name = 'actor_' + count.to_s;

        # skin
        $actor_skin = nil
        if actor.has_key? :skin
          $actor_skin = actor[:skin]
        end

        # animation
        $actor_anim = nil
        if actor.has_key? :anim
          $actor_anim = actor[:anim]
        end

        # velocity
        $actor_velocity = nil
        if actor.has_key? :velocity
          $actor_velocity = actor[:velocity]
        end

        # trajectory waypoints
        $actor_trajectory = nil
        if actor.has_key? :trajectory
          $actor_trajectory = actor[:trajectory]
        end

        # Set undefined values from the config file if one was given
        if actor.has_key? :config_file
          fromFile(DIR + "/" + actor[:config_file])
        end
    %>
      <%= fromFile(DIR + "/" + "actor_trajectory.erb") %>
    <% end %>

    <!-- Idling actors -->
    <%
      for actor in actors_idle

        # unique name
        count = count + 1
        $actor_name = 'actor_' + count.to_s;

        # skin
        $actor_skin = nil
        if actor.has_key? :skin
          $actor_skin = actor[:skin]
        end

        # animation
        $actor_anim = nil
        if actor.has_key? :anim
          $actor_anim = actor[:anim]
        end

        # idling pose
        $actor_pose = nil
        if actor.has_key? :pose
          $actor_pose = actor[:pose]
        end

        # Set undefined values from the config file if one was given
        if actor.has_key? :config_file
          fromFile(DIR + "/" + actor[:config_file])
        end
    %>
      <%= fromFile(DIR + "/" + "actor_idle.erb") %>
    <% end %>

  </world>
</sdf>
