<%
  # ServiceSim world generator
  #
  # Command line options:
  # -s seed for random

  ###############################################
  #                                             #
  #           COMMAND LINE ARGUMENTS            #
  #                                             #
  ###############################################

  # Read task number from command line
  vars = ARGV.take_while {|arg| arg[/^\w+=/]}
  ARGV.slice!(0, vars.size)
  vars.each do |var|
    k, v = var.split('=', 2)
    TOPLEVEL_BINDING.eval %Q(#{k} = "#{v}")
  end

  seed = rand(0..10000000)
  if (defined? s)
    seed = s.to_i
  end
  srand(seed)

  ###############################################
  #                                             #
  #           IMPORT OTHER ERB FILES            #
  #                                             #
  ###############################################

  # Helper function to import another erb file
  def fromFile filename
    return ERB.new(File.read(filename), nil, nil, '_sub01').result(binding)
  end

  ###############################################
  #                                             #
  #                NON-GUEST HUMANS             #
  #                                             #
  ###############################################

  # Skin files under model://actor/meshes
  skins =
  [
    "SKIN_man_blue_shirt.dae",
    "SKIN_man_green_shirt.dae",
    "SKIN_man_red_shirt.dae"
  ]

  # Idling animation files under model://actor/meshes
  animations_idle =
  [
    "ANIMATION_talking_a.dae",
    "ANIMATION_talking_b.dae"
  ]

  # Trajectory animation files under model://actor/meshes
  animations_trajectory =
  [
    "ANIMATION_walking.dae",
    "ANIMATION_running.dae"
  ]

  # List of idle actors to be inserted
  actors_idle =
  [
    # Example randomizing skin and animation
    {:skin => skins.sample, :anim => animations_idle.sample, :config_file => 'idle_near_entrance.erb'},
    # Example using skin and animation from config
    {:config_file => 'idle_near_fridge.erb'}
  ]

  # List of trajectory actors to be inserted
  actors_trajectory =
  [
    # Example randomizing skin
    {:skin => skins.sample, :config_file => 'trajectory_front.erb'},
    # Example setting velocity
    {:velocity => rand(0.9..1.2), :config_file => 'trajectory_back.erb'},
  ]

  ###############################################
  #                                             #
  #                   GUEST                     #
  #                                             #
  ###############################################

  guest_name = 'guest'
  guest_pose = [-12.7, -18.78, 1.19, 1.54, 0, 1.9]
  guest_skin = skins.sample
  guest_anim = animations_trajectory[0]
  drift_times = []

  # Generate random drift times
  minInterval = 5
  maxInterval = 300
  time = 0
  (1..30).each do
    time += rand(minInterval..maxInterval)
    drift_times.push(time)
  end

  ###############################################
  #                                             #
  #               INITIALIZATION                #
  #                                             #
  ###############################################

  # Relative path from where the script is being run to the script's directory
  DIR = File.dirname(__FILE__)

  # Actor's Z position
  actor_pos_z = 1.25

  # Units
  gap = 0.1
  $office_u = 1.5
  $cubicle_u = 0.6

  total_x = $office_u * 24
  total_y = $office_u * 18

  $count = 0
%>
<!--
  Generated from service.world.erb
  Seed: <%= seed %>
-->
<?xml version="1.0" ?>
<sdf version="1.6">
  <world name="ServiceSim">

    <!-- GUI -->
    <gui fullscreen='0'>
      <camera name='user_camera'>
        <!--pose>-14.41 -19.9 4.14 0 0.5 0.76</pose-->
        <pose>25.9 -21.8 73.6 0 1.05 1.57</pose>
      </camera>
    </gui>

    <!-- Scene -->
    <scene>
      <ambient>0.8 0.8 0.8 1.0</ambient>
      <background>0.66 0.77 0.84 1.0</background>
      <grid>1</grid>
      <origin_visual>1</origin_visual>
    </scene>

    <!-- Ground collision -->
    <model name="ground_collision">
      <static>true</static>
      <pose>100 100 0 0 0 0</pose>
      <link name="link">
        <collision name="collision">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size>200 200</size>
            </plane>
          </geometry>
        </collision>
      </link>
    </model>

    <!-- Office -->

    <!-- Ceiling -->
    <%
      x_width = total_x + $cubicle_u
      y_width = total_y + $cubicle_u
    %>
    <model name="ceiling">
      <pose>
        <%= x_width * 0.5 %>
        <%= y_width * 0.5 %>
        <%= 2 * $office_u %>
        0
        <%= Math::PI %>
        0
      </pose>

      <static>true</static>
      <link name="link">
        <visual name="visual">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size><%= x_width %> <%= y_width %></size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/</uri>
              <uri>file://media/materials/textures/</uri>
              <name>ServiceSim/Ceiling</name>
            </script>
          </material>
        </visual>
      </link>

    </model>

    <!-- Floor -->
    <model name="floor">
      <pose>
        <%= x_width * 0.5 %>
        <%= y_width * 0.5 %>
        <%= -0.001 %>
        0
        0
        0
      </pose>

      <static>true</static>
      <link name="link">
        <visual name="visual">
          <geometry>
            <plane>
              <normal>0 0 1</normal>
              <size><%= x_width %> <%= y_width %></size>
            </plane>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/</uri>
              <uri>file://media/materials/textures/</uri>
              <name>ServiceSim/Hallway</name>
            </script>
          </material>
        </visual>
      </link>

    </model>

    <%
      $count += 1
      $room_name = 'reception' + '_' + $count.to_s()
      $room_type = 'reception'
      $room_floor = 'carpet'
      $room_size = [-3, 3, -4, 0]
      $room_pose =
      [
        3 * $office_u,
        0.0,
        0.0,
        0.0,
        0.0,
        Math::PI
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      $count += 1
      $room_name = 'meeting_room_large' + '_' + $count.to_s()
      $room_type = 'meeting_room_large'
      $room_floor = 'carpet'
      $room_size = [-1, 4, -3, 0]
      $room_pose =
      [
        4 * $office_u,
        9 * $office_u + gap,
        0.0,
        0.0,
        0.0,
        -Math::PI * 0.5
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      $count += 1
      $room_name = 'office_large' + '_' + $count.to_s()
      $room_type = 'office_large'
      $room_floor = 'carpet'
      $room_size = [-1, 2, -2, 0]
      $room_pose =
      [
        3 * $office_u,
        16 * $office_u + 5 * gap,
        0.0,
        0.0,
        0.0,
        -Math::PI * 0.5
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      $count += 1
      $room_name = 'refreshment_area' + '_' + $count.to_s()
      $room_type = 'refreshment_area'
      $room_floor = 'tile'
      $room_size = [-3, 3, -4, 0]
      $room_pose =
      [
        11 * $office_u + gap,
        5 * $office_u,
        0.0,
        0.0,
        0.0,
        0.0
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      $count += 1
      $room_name = 'meeting_room_small' + '_' + $count.to_s()
      $room_type = 'meeting_room_small'
      $room_floor = 'carpet'
      $room_size = [-1, 2, -2, 0]
      $room_pose =
      [
        17 * $office_u,
        2 * $office_u,
        0.0,
        0.0,
        0.0,
        Math::PI * 0.5
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      $count += 1
      $room_name = 'meeting_room_small' + '_' + $count.to_s()
      $room_type = 'meeting_room_small'
      $room_floor = 'carpet'
      $room_size = [-1, 2, -2, 0]
      $room_pose =
      [
        17 * $office_u,
        7 * $office_u,
        0.0,
        0.0,
        0.0,
        Math::PI * 0.5
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      g = -1
      for y in (2..17).step(3)
        g += 1
        $count += 1
        $room_name = 'office_small' + '_' + $count.to_s()
        $room_type = 'office_small'
        $room_floor = 'carpet'
        $room_size = [-1, 1, -1, 0]
        $room_pose =
        [
          22 * $office_u,
          y * $office_u + g * gap,
          0.0,
          0.0,
          0.0,
          Math::PI * 0.5
        ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>
    <% end %>

    <%
      $count += 1
      $room_name = 'bathroom' + '_' + $count.to_s()
      $room_type = 'bathroom'
      $room_floor = 'tile'
      $room_size = [0, 1, -1, 0]
      $room_pose =
      [
        17 * $office_u,
        10 * $office_u + gap,
        0.0,
        0.0,
        0.0,
        Math::PI * 0.5
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      $count += 1
      $room_name = 'bathroom' + '_' + $count.to_s()
      $room_type = 'bathroom'
      $room_floor = 'tile'
      $room_size = [0, 1, -1, 0]
      $room_pose =
      [
        17 * $office_u,
        12 * $office_u + 2 * gap,
        0.0,
        0.0,
        0.0,
        Math::PI * 0.5
      ]
    %>
    <%= fromFile(DIR + "/" + "room.erb") %>

    <%
      for x in [10, 14]
        for y in [8, 12]
          $count += 1
    %>
    <include>
      <name>island_<%= $count %></name>
      <pose>
        <%= x * $office_u %>
        <%= y * $office_u %>
        0
        0
        0
        <%= Math::PI * 0.25 %>
      </pose>
      <uri>model://cubicle_island</uri>
    </include>
    <%
        end
      end
    %>

    <!-- wall -->
    <%
      openings = [11, 12, 13]
      for c in (0..20)

        if openings.include?(c)
          next
        end

        $count += 1
        $cubicle_type = 'open'
        $cubicle_pose =
        [
          7 * $office_u + 0.5 * gap,
          5 * $office_u + c * $cubicle_u,
          0.0,
          0.0,
          0.0,
          Math::PI * 0.5
        ]
    %>
    <%= fromFile(DIR + "/" + "cubicle.erb") %>
    <% end %>

    <!-- cubicles on the back -->
    <%
      center_y = 16
      x_min = 18
      x_max = 45
      openings = (30..33)

      for x in (x_min..x_max)

        if openings.include?(x)
          next
        end

        $count += 1
        $cubicle_type = 'closed'
        $cubicle_pose =
        [
          x * $cubicle_u,
          center_y * $office_u,
          0.0,
          0.0,
          0.0,
          0.0
        ]
    %>
    <%= fromFile(DIR + "/" + "cubicle.erb") %>
    <% end %>

    <%
      for x in (x_min..(x_max+1)).step(4)
        for y in (-3..2)

          $count += 1
          $cubicle_type = (y == -3 or y == 2) ? 'open' : 'closed'
          $cubicle_pose =
          [
            x * $cubicle_u,
            center_y * $office_u + y * $cubicle_u,
            0.0,
            0.0,
            0.0,
            Math::PI * 0.5
          ]
    %>
    <%= fromFile(DIR + "/" + "cubicle.erb") %>
    <%
        end
      end
    %>
    <%
      range = (x_min..x_max).step(4).to_a
      range.concat(((x_min+3)..(x_max+3)).step(4).to_a)
      for x in range
        for y in [-3, 3]

          if openings.include?(x)
            next
          end

          $count += 1
          $cubicle_type = 'open'
          $cubicle_pose =
          [
            x * $cubicle_u,
            center_y * $office_u + y * $cubicle_u,
            0.0,
            0.0,
            0.0,
            0.0
          ]
    %>
    <%= fromFile(DIR + "/" + "cubicle.erb") %>
    <%
        end
      end
    %>

    <!-- Guest -->
    <actor name="<%= guest_name %>">

      <!-- Starting pose, nice for when the world is reset -->
      <pose>
        <%= guest_pose[0] %>
        <%= guest_pose[1] %>
        <%= guest_pose[2] %>
        <%= guest_pose[3] %>
        <%= guest_pose[4] %>
        <%= guest_pose[5] %>
      </pose>

      <skin>
        <filename>model://actor/meshes/<%= guest_skin %></filename>
      </skin>

      <animation name="animation">
        <filename>model://actor/meshes/<%= guest_anim %></filename>
      </animation>

      <!-- Need one waypoint to idle at -->
      <script>
        <trajectory id='0' type='animation'>
          <waypoint>
            <time>100</time>
              <pose>
                <%= guest_pose[0] %>
                <%= guest_pose[1] %>
                <%= guest_pose[2] %>
                <%= guest_pose[3] %>
                <%= guest_pose[4] %>
                <%= guest_pose[5] %>
              </pose>
          </waypoint>
        </trajectory>
      </script>

      <plugin name="trajectory" filename="libFollowActorPlugin.so">

        <namespace>servicesim</namespace>

        <ignore_obstacle>willowgarage</ignore_obstacle>
        <ignore_obstacle>ground_collision</ignore_obstacle>

        <!-- FIXME: servicebot's bounding box is huge and always colliding -->
        <ignore_obstacle>servicebot</ignore_obstacle>

        <% for time in drift_times %>
          <drift_time><%= time.to_s %></drift_time>
        <% end %>

      </plugin>

    </actor>

    <!-- Trajectory actors -->
    <%
      for actor in actors_trajectory

        # unique name
        $count = $count + 1
        $actor_name = 'actor_' + $count.to_s;

        # skin
        $actor_skin = nil
        if actor.has_key? :skin
          $actor_skin = actor[:skin]
        end

        # animation
        $actor_anim = nil
        if actor.has_key? :anim
          $actor_anim = actor[:anim]
        end

        # velocity
        $actor_velocity = nil
        if actor.has_key? :velocity
          $actor_velocity = actor[:velocity]
        end

        # trajectory waypoints
        $actor_trajectory = nil
        if actor.has_key? :trajectory
          $actor_trajectory = actor[:trajectory]
        end

        # Set undefined values from the config file if one was given
        if actor.has_key? :config_file
          fromFile(DIR + "/" + actor[:config_file])
        end
    %>
      <%= fromFile(DIR + "/" + "actor_trajectory.erb") %>
    <% end %>

    <!-- Idling actors -->
    <%
      for actor in actors_idle

        # unique name
        $count = $count + 1
        $actor_name = 'actor_' + $count.to_s;

        # skin
        $actor_skin = nil
        if actor.has_key? :skin
          $actor_skin = actor[:skin]
        end

        # animation
        $actor_anim = nil
        if actor.has_key? :anim
          $actor_anim = actor[:anim]
        end

        # idling pose
        $actor_pose = nil
        if actor.has_key? :pose
          $actor_pose = actor[:pose]
        end

        # Set undefined values from the config file if one was given
        if actor.has_key? :config_file
          fromFile(DIR + "/" + actor[:config_file])
        end
    %>
      <%= fromFile(DIR + "/" + "actor_idle.erb") %>
    <% end %>

  </world>
</sdf>
